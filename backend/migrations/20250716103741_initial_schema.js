// backend/migrations/YYYYMMDDHHMMSS_initial_schema.js
// (YYYYMMDDHHMMSS is the timestamp generated by knex)

exports.up = function(knex) {
  return knex.schema
    // 1. Trips Table
    .createTable('trips', function(table) {
      table.increments('id').primary();
      table.string('date').notNullable();
      table.string('car_no').notNullable();
      table.string('from_location').notNullable();
      table.string('to_location').notNullable();
      table.integer('route_charge');
      table.integer('empty_pickup_charge');
      table.integer('empty_dropoff_charge');
      table.string('empty_handling_location');
      table.string('overnight_status');
      table.string('day_over_status');
      table.string('remarks');
      table.integer('total_charge');
      table.integer('km_travelled');
      table.string('driver_name');
      table.integer('is_manual_edited').defaultTo(0);
      table.timestamp('created_at').defaultTo(knex.fn.now());
      table.timestamp('updated_at').defaultTo(knex.fn.now());
    })
    // 2. Cars Table
    .createTable('cars', function(table) {
      table.increments('id').primary();
      table.string('car_no').notNullable().unique();
      table.integer('current_km');
      table.string('license_plate');
      table.string('model');
      table.string('color');
      table.text('purchase_date'); // TEXT is fine for dates in SQLite
      table.string('remarks');
      table.timestamp('created_at').defaultTo(knex.fn.now());
      table.timestamp('updated_at').defaultTo(knex.fn.now());
    })
    // 3. Drivers Table
    .createTable('drivers', function(table) {
      table.increments('id').primary();
      table.string('driver_name').notNullable().unique();
      table.string('license_no');
      table.string('phone_no');
      table.string('address');
      table.text('hire_date'); // TEXT is fine for dates in SQLite
      table.integer('salary_per_trip');
      table.string('remarks');
      table.timestamp('created_at').defaultTo(knex.fn.now());
      table.timestamp('updated_at').defaultTo(knex.fn.now());
    })
    // 4. General Expenses Table
    .createTable('general_expenses', function(table) {
      table.increments('id').primary();
      table.string('expense_date').notNullable();
      table.string('description').notNullable();
      table.integer('amount').notNullable();
      table.string('remarks');
      table.timestamp('created_at').defaultTo(knex.fn.now());
    })
    // 5. Settings Table
    .createTable('settings', function(table) {
      table.increments('id').primary();
      table.string('setting_key').notNullable().unique();
      table.string('setting_value');
      table.timestamp('created_at').defaultTo(knex.fn.now());
      table.timestamp('updated_at').defaultTo(knex.fn.now());
    })
    // 6. Route Charges Versions Table
    .createTable('route_charges_versions', function(table) {
      table.increments('id').primary();
      table.string('effective_date').notNullable().unique();
      table.text('route_charge_data').notNullable(); // JSON string
      table.timestamp('created_at').defaultTo(knex.fn.now());
    })
    // 7. Empty Charges Versions Table
    .createTable('empty_charges_versions', function(table) {
      table.increments('id').primary();
      table.string('effective_date').notNullable().unique();
      table.text('empty_charge_data').notNullable(); // JSON string
      table.timestamp('created_at').defaultTo(knex.fn.now());
    })
    // 8. Driver Salary History Table (Depends on drivers, trips - adding trip_id FK based on server.js comment)
    .createTable('driver_salary_history', function(table) {
      table.increments('id').primary();
      table.integer('driver_id').notNullable().unsigned();
      table.integer('trip_id').unsigned(); // Optional link to a specific trip
      table.string('payment_date').notNullable();
      table.integer('amount').notNullable();
      table.string('remarks');
      table.timestamp('created_at').defaultTo(knex.fn.now());

      table.foreign('driver_id').references('id').inTable('drivers').onDelete('CASCADE');
      table.foreign('trip_id').references('id').inTable('trips').onDelete('SET NULL'); // Set NULL if trip is deleted
    })
    // 9. Car Maintenance Table (Depends on cars)
    .createTable('car_maintenance', function(table) {
      table.increments('id').primary();
      table.integer('car_id').notNullable().unsigned();
      table.string('maintenance_date').notNullable();
      table.string('description');
      table.integer('cost').notNullable();
      table.string('remarks');
      table.timestamp('created_at').defaultTo(knex.fn.now());

      table.foreign('car_id').references('id').inTable('cars').onDelete('CASCADE');
    })
    // 10. Fuel Logs Table (Depends on cars)
    .createTable('fuel_logs', function(table) {
      table.increments('id').primary();
      table.integer('car_id').notNullable().unsigned();
      table.string('log_date').notNullable();
      table.float('fuel_amount_liters').notNullable(); // REAL in SQLite
      table.integer('cost_per_liter').notNullable();
      table.integer('total_cost').notNullable();
      table.integer('current_km');
      table.string('remarks');
      table.timestamp('created_at').defaultTo(knex.fn.now());

      table.foreign('car_id').references('id').inTable('cars').onDelete('CASCADE');
    })
    // 11. Car Driver Assignments Table (Depends on cars, drivers)
    .createTable('car_driver_assignments', function(table) {
      table.increments('id').primary();
      table.integer('car_id').notNullable().unsigned();
      table.integer('driver_id').notNullable().unsigned();
      table.string('assignment_date').notNullable();
      table.string('end_date'); // Nullable
      table.string('remarks');
      table.timestamp('created_at').defaultTo(knex.fn.now());

      table.foreign('car_id').references('id').inTable('cars').onDelete('CASCADE');
      table.foreign('driver_id').references('id').inTable('drivers').onDelete('CASCADE');
    })
    // 12. Fuel Readings Table (Depends on trips)
    .createTable('fuel_readings', function(table) {
      table.increments('id').primary();
      table.integer('trip_id').notNullable().unsigned();
      table.string('reading_date').notNullable();
      table.float('current_fuel_level').notNullable(); // REAL in SQLite
      table.string('remarks');
      table.timestamp('created_at').defaultTo(knex.fn.now());

      table.foreign('trip_id').references('id').inTable('trips').onDelete('CASCADE');
    });
};

exports.down = function(knex) {
  // Drop tables in reverse order of creation to respect foreign key constraints
  return knex.schema
    .dropTableIfExists('fuel_readings')
    .dropTableIfExists('car_driver_assignments')
    .dropTableIfExists('fuel_logs')
    .dropTableIfExists('car_maintenance')
    .dropTableIfExists('driver_salary_history')
    .dropTableIfExists('empty_charges_versions')
    .dropTableIfExists('route_charges_versions')
    .dropTableIfExists('settings')
    .dropTableIfExists('general_expenses')
    .dropTableIfExists('drivers')
    .dropTableIfExists('cars')
    .dropTableIfExists('trips');
};